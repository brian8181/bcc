// lex.yy.cpp generated by reflex 6.0.0 from example.l

#define REFLEX_VERSION "6.0.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               ExampleLexer
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "lex.yy.cpp"
#define REFLEX_OPTION_prefix              yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (5)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE ABSTRACT LEXER CLASS                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/flexlexer.h>
typedef reflex::FlexLexer<reflex::Matcher> FlexLexer;

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class ExampleLexer : public FlexLexer {
 public:
  ExampleLexer(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, NULL means std::cout by default
      std::ostream *os = NULL)
    :
      FlexLexer(input, os)
  {
  }
  // the flex lexer function defined by SECTION 2
  virtual int yylex(void);
  // lexer functions accepting new input to scan
  int yylex(const reflex::Input& input)
  {
    in(input);
    return yylex();
  }
  int yylex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return yylex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 4 "example.l"

#include <iostream>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int ExampleLexer::yylex(void)
{
  static const char *REGEX_INITIAL = "(?m)([0-9]+)|([A-Z_a-z][0-9A-Z_a-z]*)|([*+\\x2d/=])|([\\x09\\x0a\\x0d\\x20]+)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule example.l:10: [0-9]+ :
            YY_USER_ACTION
#line 10 "example.l"
{ std::cout << "NUMBER: " << yytext << "\n"; }
            YY_BREAK
          case 2: // rule example.l:11: [a-zA-Z_][a-zA-Z0-9_]* :
            YY_USER_ACTION
#line 11 "example.l"
{ std::cout << "IDENTIFIER: " << yytext << "\n"; }
            YY_BREAK
          case 3: // rule example.l:12: [+*/=-] :
            YY_USER_ACTION
#line 12 "example.l"
{ std::cout << "OPERATOR: " << yytext << "\n"; }
            YY_BREAK
          case 4: // rule example.l:13: [ \t\r\n]+ :
            YY_USER_ACTION
#line 13 "example.l"
{ /* skip whitespace */ }
            YY_BREAK
          case 5: // rule example.l:14: . :
            YY_USER_ACTION
#line 14 "example.l"
{ std::cout << "UNKNOWN: " << yytext << "\n"; }

            YY_BREAK
        }
  }
}
