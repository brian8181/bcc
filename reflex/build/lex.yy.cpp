// build/lex.yy.cpp generated by reflex 5.1.0 from src/flexexample7.lxx

#define REFLEX_VERSION "5.1.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_flex                true
#define REFLEX_OPTION_header_file         "lex.yy.h"
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               yyFlexLexer
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "build/lex.yy.cpp"
#define REFLEX_OPTION_prefix              yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 5 "src/flexexample7.lxx"

#include "flexexample7.tab.hxx"  /* Generated by bison. */


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  FLEX-COMPATIBLE DEFINITIONS                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define INITIAL (0)
#define YY_NUM_RULES (4)

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS INCLUDE                                                       //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include "lex.yy.h"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "src/flexexample7.lxx"
/* Scanner for "C" assignment statements... sort of. */
/* Compile: reflex --flex --bison-locations flexexample7.lxx */
/* Compile: bison -d flexexample7.yxx */


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON LOCATIONS                                                           //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

yyFlexLexer YY_SCANNER;

#ifndef YY_EXTERN_C
#define YY_EXTERN_C
#endif

char *yytext;
yy_size_t yyleng;
int yylineno;

YY_EXTERN_C int yylex(YYSTYPE *lvalp, YYLTYPE *llocp)
{
  int yylex_token = YY_SCANNER.yylex(*lvalp, *llocp);
  yytext = const_cast<char*>(YY_SCANNER.YYText());
  yyleng = static_cast<yy_size_t>(YY_SCANNER.YYLeng());
  yylineno = static_cast<int>(YY_SCANNER.lineno());
  return yylex_token;
}

#define yytext const_cast<char*>(YY_SCANNER.YYText())
#define yyleng static_cast<yy_size_t>(YY_SCANNER.YYLeng())
#define yylineno static_cast<int>(YY_SCANNER.lineno())

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yyFlexLexer::yylex(YYSTYPE& yylval, YYLTYPE& yylloc)
{
  static const char *REGEX_INITIAL = "(?m)([0-9]+)|([0-9A-Za-z]+)|((?:\\Q=\\E)|(?:\\Q;\\E))|(.|\\n)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    YY_USER_INIT
  }
  while (true)
  {
        matcher().scan();
        yylloc_update(yylloc);
        switch (matcher().accept())
        {
          case 0:
            if (matcher().at_end())
            {
              yyterminate();
            }
            else
            {
              output(matcher().input());
            }
            YY_BREAK
          case 1: // rule src/flexexample7.lxx:13: [[:digit:]]+ :
            YY_USER_ACTION
#line 13 "src/flexexample7.lxx"
{ yylval.num = atoi(yytext);   return NUMBER; }
            YY_BREAK
          case 2: // rule src/flexexample7.lxx:14: [[:alnum:]]+ :
            YY_USER_ACTION
#line 14 "src/flexexample7.lxx"
{ yylval.str = strdup(yytext); return STRING; }
            YY_BREAK
          case 3: // rule src/flexexample7.lxx:15: "="|";" :
            YY_USER_ACTION
#line 15 "src/flexexample7.lxx"
{ return yytext[0]; }
            YY_BREAK
          case 4: // rule src/flexexample7.lxx:16: .|\n :
            YY_USER_ACTION
#line 16 "src/flexexample7.lxx"
{}

            YY_BREAK
        }
  }
}
